#[derive(Debug)]
pub enum Opcode {
    Rca(u16),
    Clear,
    Return,
    Jump(u16),
    JumpPlus(u16),
    Call(u16),
    SkipEqVal(u8, u8),
    SkipNotEqVal(u8, u8),
    SkipEq(u8, u8),
    SetReg(u8, u8),
    AddVal(u8, u8),
    CopyReg(u8, u8),
    And(u8, u8),
    Or(u8, u8),
    Xor(u8, u8),
    Add(u8, u8),
    Substract(u8, u8),
    ShiftRight(u8),
    MinusReg(u8, u8),
    ShiftLeft(u8),
    SkipNotEq(u8, u8),
    SetI(u16),
    Random(u8, u8),
    DrawSprite(u8, u8, u8),
    SkipIfKeyNotPressed(u8),
    SkipIfKeyPressed(u8),
    GetDelayTimer(u8),
    GetKeypress(u8),
    SetDelayTimer(u8),
    SetSoundTimer(u8),
    AddI(u8),
    SetISprite(u8),
    StoreBCD(u8),
    Store(u8),
    Restore(u8),
    Unknown(u16),
}

pub fn binary_to_opcode(binary_op: u16) -> Opcode {
    let op = (
        ((binary_op & 0xF000) >> 12) as u8,
        ((binary_op & 0x0F00) >> 8) as u8,
        ((binary_op & 0x00F0) >> 4) as u8,
        (binary_op & 0x000F) as u8,
    );

    match op {
        (0x0, 0x0, 0xE, 0x0) => Opcode::Clear,
        (0x0, 0x0, 0xE, 0xE) => Opcode::Return,
        (0x0, n1, n2, n3) => Opcode::Rca(((n1 as u16) << 8) + ((n2 as u16) << 4) + (n3 as u16)),
        (0x1, n1, n2, n3) => Opcode::Jump(((n1 as u16) << 8) + ((n2 as u16) << 4) + (n3 as u16)),
        (0x2, n1, n2, n3) => Opcode::Call(((n1 as u16) << 8) + ((n2 as u16) << 4) + (n3 as u16)),
        (0x3, x, n1, n2) => Opcode::SkipEqVal(x, (n1 << 4) + n2),
        (0x4, x, n1, n2) => Opcode::SkipNotEqVal(x, (n1 << 4) + n2),
        (0x5, x, y, 0x0) => Opcode::SkipEq(x, y),
        (0x6, x, n1, n2) => Opcode::SetReg(x, (n1 << 4) + n2),
        (0x7, x, n1, n2) => Opcode::AddVal(x, (n1 << 4) + n2),
        (0x8, x, y, 0x0) => Opcode::CopyReg(x, y),
        (0x8, x, y, 0x1) => Opcode::Or(x, y),
        (0x8, x, y, 0x2) => Opcode::And(x, y),
        (0x8, x, y, 0x3) => Opcode::Xor(x, y),
        (0x8, x, y, 0x4) => Opcode::Add(x, y),
        (0x8, x, y, 0x5) => Opcode::Substract(x, y),
        (0x8, x, _, 0x6) => Opcode::ShiftRight(x),
        (0x8, x, y, 0x7) => Opcode::MinusReg(x, y),
        (0x8, x, _, 0xE) => Opcode::ShiftLeft(x),
        (0x9, x, y, 0x0) => Opcode::SkipNotEq(x, y),
        (0xA, n1, n2, n3) => Opcode::SetI(((n1 as u16) << 8) + ((n2 as u16) << 4) + (n3 as u16)),
        (0xB, n1, n2, n3) => Opcode::JumpPlus(((n1 as u16) << 8) + ((n2 as u16) << 4) + (n3 as u16)),
        (0xC, x, n1, n2) => Opcode::Random(x, (n1 << 4) + n2),
        (0xD, x, y, n) => Opcode::DrawSprite(x, y, n),
        (0xE, x, 0x9, 0xE) => Opcode::SkipIfKeyPressed(x),
        (0xE, x, 0xA, 0x1) => Opcode::SkipIfKeyNotPressed(x),
        (0xF, x, 0x0, 0x7) => Opcode::GetDelayTimer(x),
        (0xF, x, 0x0, 0xA) => Opcode::GetKeypress(x),
        (0xF, x, 0x1, 0x5) => Opcode::SetDelayTimer(x),
        (0xF, x, 0x1, 0x8) => Opcode::SetSoundTimer(x),
        (0xF, x, 0x1, 0xE) => Opcode::AddI(x),
        (0xF, x, 0x2, 0x9) => Opcode::SetISprite(x),
        (0xF, x, 0x3, 0x3) => Opcode::StoreBCD(x),
        (0xF, x, 0x5, 0x5) => Opcode::Store(x),
        (0xF, x, 0x6, 0x5) => Opcode::Restore(x),
        (a, b, c, d) => Opcode::Unknown(((a as u16) << 12) + ((b as u16) << 8) + ((c as u16) << 4) + (d as u16)),
    }
}
